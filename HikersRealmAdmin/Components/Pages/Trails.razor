@page "/"
@page "/Trails"

@using HikersRealmAdmin.Components.Models


@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS


<h3>
    <span class="me-2">Trail Name</span>
</h3>

<div class="row mb-3">
    <div class="col-md-6">
        <input class="form-control" placeholder="Search trails..." @bind="SearchTerm" @bind:event="oninput" />
    </div>
    <div class="col-md-4 d-flex align-items-center">
        <input type="checkbox" class="form-check-input me-2" id="showInactive" @bind="showInactive" />
        <label class="form-check-label" for="showInactive">Show inactive trails</label>
    </div>
    <div class="col-md-2 text-end">
        <button class="btn btn-primary" @onclick="ShowCreateTrailModal">Add Trail</button>
    </div>
</div>

<CreateTrailModal @bind-Visible="showCreateTrailModal" OnTrailCreated="OnTrailCreated" />

@if (loading)
{
    <p>Loading trails...</p>
}
else if (PagedTrails.Any())
{
    <div class="trails-table-container" id="trails-table-container">
        <table class="table table-striped mb-0" id="trails-table">
            <colgroup>
                <col style="width: 22%;" /> <!-- Name -->
                <col style="width: 14%;" /> <!-- Difficulty -->
                <col style="width: 14%;" /> <!-- Status -->
                <col style="width: 18%;" /> <!-- Days -->
                <col style="width: 14%;" /> <!-- Length -->
                <col style="width: 18%;" /> <!-- Actions -->
            </colgroup>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Difficulty</th>
                    <th>Status</th>
                    <th>Days</th>
                    <th>Length</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var trail in PagedTrails)
                {
                    <tr class="trail-row">
                        <td>@trail.Name</td>
                        <td>@trail.Difficulty</td>
                        <td>@trail.Status</td>
                        <td>
                            <span>@trail.MinDays</span>
                            <span class="mx-1">-</span>
                            <span>@trail.MaxDays</span>
                        </td>
                        <td>@trail.Length</td>
                        <td>
                            <button class="btn btn-sm btn-secondary me-1" @onclick="() => NavigateToEdit(trail.Id)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteTrail(trail.Id)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

    </div>


    <nav aria-label="Trail table pagination" class="mt-3">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
            </li>
            @for (int i = 1; i <= TotalPages; i++)
            {
                var pageNumber = i;
                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                </li>
            }

            <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>

}
else
{
    <p>No trails found.</p>
}

<AlertMessage @ref="alert" />

@code {
    private List<Trail> trails = new();
    private string searchTerm = "";
    private bool showInactive = false;
    private bool loading = true;
    private AlertMessage? alert;
    private bool showCreateTrailModal = false;

    // Pagination
    private int currentPage = 1;
    private int pageSize = 50;
    private int TotalPages => (int)Math.Ceiling((double)FilteredTrails.Count() / pageSize);
    private bool pageSizeSet = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if ((firstRender || !pageSizeSet) && trails.Count > 0)
        {
            // Wait for at least one row to render
            int fitCount = await JS.InvokeAsync<int>(
                "getTableRowFitCount",
                "#trails-table-container",
                ".trail-row"
            );
            if (fitCount > 0 && fitCount != pageSize)
            {
                pageSize = fitCount;
                pageSizeSet = true;
                StateHasChanged();
            }
        }
    }


    private void NavigateToAdd()
    {
        Navigation.NavigateTo("/TrailsEdit");
    }

    private void NavigateToEdit(int id)
    {
        Navigation.NavigateTo($"/TrailsEdit/{id}");
    }

    // Reset to first page on search
    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                currentPage = 1;
            }
        }
    }

    private IEnumerable<Trail> FilteredTrails =>
        trails.Where(t =>
            (showInactive || t.Status?.Equals("Active", StringComparison.OrdinalIgnoreCase) == true) &&
            (string.IsNullOrWhiteSpace(SearchTerm) ||
                (t.Name?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (t.Difficulty?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
                (t.Status?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            )
        );


    private IEnumerable<Trail> PagedTrails =>
        FilteredTrails
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadTrails();
    }

    private async Task LoadTrails()
    {
        loading = true;
        try
        {
            trails = await Http.GetFromJsonAsync<List<Trail>>("https://localhost:7193/Trail") ?? new();
        }
        catch
        {
            await alert?.ShowMessageAsync("Failed to load trails.");
        }
        loading = false;
    }

    private void ChangePage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;
        currentPage = page;
        StateHasChanged();
    }

    private void ShowCreateTrailModal()
    {
        showCreateTrailModal = true;
    }

    private void OnTrailCreated(int newTrailId)
    {
        // Navigate to the edit page for the new trail
        Navigation.NavigateTo($"/TrailsEdit/{newTrailId}");
    }

    private async Task DeleteTrail(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this trail?");
        if (!confirmed)
            return;

        try
        {
            var response = await Http.DeleteAsync($"https://localhost:7193/Trail/{id}");
            if (response.IsSuccessStatusCode)
            {
                // Remove the deleted trail from the list and refresh UI
                var toRemove = trails.FirstOrDefault(t => t.Id == id);
                if (toRemove != null)
                {
                    trails.Remove(toRemove);
                }
                await alert?.ShowMessageAsync("Trail deleted successfully!");
            }
            else
            {
                await alert?.ShowMessageAsync("Failed to delete trail.");
            }
        }
        catch
        {
            await alert?.ShowMessageAsync("Error occurred while deleting trail.");
        }
    }

}
