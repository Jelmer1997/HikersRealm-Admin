@page "/"
@page "/Trails"

@using HikersRealmAdmin.Components.Models
@inject HttpClient Http
@inject NavigationManager Navigation


<h3>Trails</h3>

<div class="row mb-3">
    <div class="col-md-6">
        <input class="form-control" placeholder="Search trails..." @bind="SearchTerm" @bind:event="oninput" />
    </div>
    <div class="col-md-6 text-end">
        <button class="btn btn-primary" @onclick="NavigateToAdd">Add Trail</button>
    </div>
</div>

@if (loading)
{
    <p>Loading trails...</p>
}
else if (PagedTrails.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Difficulty</th>
                <th>Status</th>
                <th>Min Days</th>
                <th>Max Days</th>
                <th>Length</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var trail in PagedTrails)
            {
                <tr>
                    <td>@trail.Name</td>
                    <td>@trail.Difficulty</td>
                    <td>@trail.Status</td>
                    <td>@trail.MinDays</td>
                    <td>@trail.MaxDays</td>
                    <td>@trail.Length</td>
                    <td>
                        <button class="btn btn-sm btn-secondary" @onclick="() => NavigateToEdit(trail.Id)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav aria-label="Trail table pagination" class="mt-3">
        <ul class="pagination justify-content-center">
            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
            </li>
            @for (int i = 1; i <= TotalPages; i++)
            {
                var pageNumber = i;
                <li class="page-item @(currentPage == pageNumber ? "active" : "")">
                    <button class="page-link" @onclick="() => ChangePage(pageNumber)">@pageNumber</button>
                </li>
            }

            <li class="page-item @(currentPage == TotalPages ? "disabled" : "")">
                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
            </li>
        </ul>
    </nav>
}
else
{
    <p>No trails found.</p>
}

@if (!string.IsNullOrEmpty(message))
{
    <div class="fixed-bottom-message alert alert-info text-center">
        @message
    </div>
}

@code {
    private List<Trail> trails = new();
    private string searchTerm = "";
    private bool loading = true;
    private string message = "";

    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int TotalPages => (int)Math.Ceiling((double)FilteredTrails.Count() / pageSize);

    private IEnumerable<Trail> FilteredTrails =>
       string.IsNullOrWhiteSpace(SearchTerm)
           ? trails
           : trails.Where(t =>
               (t.Name?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (t.Difficulty?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false) ||
               (t.Status?.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
           );

    private IEnumerable<Trail> PagedTrails =>
        FilteredTrails
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadTrails();
    }

    private async Task LoadTrails()
    {
        loading = true;
        try
        {
            trails = await Http.GetFromJsonAsync<List<Trail>>("https://localhost:7193/Trail") ?? new();
        }
        catch
        {
            message = "Failed to load trails.";
        }
        loading = false;
    }

    private void ChangePage(int page)
    {
        if (page < 1) page = 1;
        if (page > TotalPages) page = TotalPages;
        currentPage = page;
        StateHasChanged();
    }

    private void NavigateToAdd()
    {
        Navigation.NavigateTo("/TrailsEdit");
    }

    private void NavigateToEdit(int id)
    {
        Navigation.NavigateTo($"/TrailsEdit/{id}");
    }

    // Reset to first page on search
    private string SearchTerm
    {
        get => searchTerm;
        set
        {
            if (searchTerm != value)
            {
                searchTerm = value;
                currentPage = 1;
            }
        }
    }
}
